package lab3::types
public
	with Data_Model;
	with base_types;

	--
	data orientation
	end orientation;

	data implementation orientation.i
		subcomponents
			x : data base_types::float;
			y : data base_types::float;
			z : data base_types::float;
	end orientation.i;
	
	--
	data delta_v
	end delta_v;

	data implementation delta_v.i
		subcomponents
			x : data base_types::float;
			y : data base_types::float;
			z : data base_types::float;
	end delta_v.i;

	-- position: for representing longitude, latitude and altitude data from GPS
	data position
	end position;

	data implementation position.i
		subcomponents
			lo : data base_types::float;
			la : data base_types::float;
			al : data base_types::float;
	end position.i;
	
	--
	data angular_rate
	end angular_rate;

	data implementation angular_rate.i
		subcomponents
			lo : data base_types::float;
			la : data base_types::float;
			al : data base_types::float;
	end angular_rate.i;
	
	--
	data torque
	end torque;

	data implementation torque.i
		subcomponents
			lo : data base_types::float;
			la : data base_types::float;
			al : data base_types::float;
	end torque.i;
	
	--
	data sunExist
		properties
			Data_Model::Data_Representation => boolean;
	end sunExist;
	
	--
	data gpsTimeStamp
		properties
			Data_Model::Data_Representation => string;
	end gpsTimeStamp;
	
	--
	data sensor_data
	end sensor_data;

	data implementation sensor_data.i
		subcomponents	
			fss: data orientation;
			css: data orientation;
			sps: data sunExist;
			es: data orientation;
			mag: data orientation;
			gyro: data angular_rate;
			pos: data position;
			time: data gpsTimeStamp;
			st: data orientation;
	end sensor_data.i;
	
	-- data types for activation of devices
	data deviceActivate
		properties
			Data_Model::Data_Representation => boolean;
	end deviceActivate;
	
	data aocsActivate
		properties
			Data_Model::Data_Representation => boolean;
	end aocsActivate;
	
	
	-- data types for defining telecommand messages from main compter. It includes 
	-- mission mode, orbit parameters, desired orientation if any, and probably reconfiguration
	-- commands if needed
	data telecommandString
		properties
			Data_Model:: Data_Representation => string;
	end telecommandString;
	
	
	-- data type for desired orbit parameters sent to AOCS via tele-command (basically a string with desired values)
	 data telemetryString
	 	properties
	 		Data_Model::Data_Representation => string;
	 end telemetryString;
	 
	 -- data type for signals to be sent to the watchdog by AOCS computers
	 data watchdogString
	 	properties
	 		Data_Model::Data_Representation => string;
	 end watchdogString;
	
	data watchdogResponse
	 	properties
	 		Data_Model::Data_Representation => string;
	 end watchdogResponse;
	 
end lab3::types;