package lab3
public
	with Data_Model;
	
	bus AocsBus
	end AocsBus;
	
	bus TmTcBus
	end TmTcBus;
	
	-- data types needed
	
	data radians
		properties
			Data_Model::Data_Representation => float;
	end radians;
	
	data torque
		properties
			Data_Model::Data_Representation => float;
	end torque;
	
	data deltaV
		properties
			Data_Model::Data_Representation => float;
	end deltaV;
	
	data magneto
		properties
			Data_Model::Data_Representation => float;
	end magneto;
	
	data angularRate
		properties
			Data_Model::Data_Representation => float;
	end angularRate;
	
	data sunExist
		properties
			Data_Model::Data_Representation => boolean;
	end sunExist;
	
	-- position: for representing longitude, latitude and altitude data from GPS
	data position 
		properties
			Data_Model::Data_Representation => float;
	end position;
	data gpsTimeStamp
		properties
			Data_Model::Data_Representation => string;
	end gpsTimeStamp;
	
	-- data types for activation of devices
	data deviceActivate
		properties
			Data_Model::Data_Representation => boolean;
	end deviceActivate;
	
	data aocsActivate
		properties
			Data_Model::Data_Representation => boolean;
	end aocsActivate;
	
	
	-- data types for defining telecommand messages from main compter. It includes 
	-- mission mode, orbit parameters, desired orientation if any, and probably reconfiguration
	-- commands if needed
	data telecommandString
		properties
			Data_Model:: Data_Representation => string;
	end telecommandString;
	
	
	-- data type for desired orbit parameters sent to AOCS via tele-command (basically a string with desired values)
	 data telemetryString
	 	properties
	 		Data_Model::Data_Representation => string;
	 end telemetryString;
	 
	 -- data type for signals to be sent to the watchdog by AOCS computers
	 data watchdogString
	 	properties
	 		Data_Model::Data_Representation => string;
	 end watchdogString;
	
	
	-- -------------------------- DEVICES --------------------------------------
	
	-- -----------------DEVICES: SENSORS ----------------------
	device FineSunSensor
		features
			fss_rot_x: out data port radians;
			fss_rot_y: out data port radians;
			fss_rot_z: out data port radians;
			fss_activate: in data port deviceActivate;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source fss_rot_x {latency => 1ms..2ms;};
			fy: flow source fss_rot_y {latency => 1ms..2ms;};
			fz: flow source fss_rot_z {latency => 1ms..2ms;};
	end FineSunSensor;
		
	device CoarseSunSensor
		features
			css_rot_x: out data port radians;
			css_rot_y: out data port radians;
			css_rot_z: out data port radians;
			css_activate: in data port deviceActivate;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source css_rot_x {latency => 1ms..2ms;};
			fy: flow source css_rot_y {latency => 1ms..2ms;};
			fz: flow source css_rot_z {latency => 1ms..2ms;};
	end CoarseSunSensor;
	
	device SunPresenceSensor
		features
			is_present: out data port;
			sps_activate: in data port deviceActivate;
			
			
			comm: requires bus access AocsBus;
			
		flows
			fi: flow source is_present {latency => 1ms..2ms;};
	end SunPresenceSensor;
		
	device EarthSensor
		features
			es_rot_x: out data port radians;
			es_rot_y: out data port radians;
			es_rot_z: out data port radians;
			es_activate: in data port deviceActivate;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source es_rot_x {latency => 1ms..2ms;};
			fy: flow source es_rot_y {latency => 1ms..2ms;};
			fz: flow source es_rot_z {latency => 1ms..2ms;};
	end EarthSensor;
	
	device Magnetometer
		features
			mag_x: out data port magneto;
			mag_y: out data port magneto;
			mag_z: out data port magneto;
			mag_activate: in data port deviceActivate;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source mag_x {latency => 1ms..2ms;};
			fy: flow source mag_y {latency => 1ms..2ms;};
			fz: flow source mag_z {latency => 1ms..2ms;};
	end Magnetometer;
		
	device Gyroscope
		features
			rate_x: out data port angularRate;
			rate_y: out data port angularRate;
			rate_z: out data port angularRate;
			rate_activate: in data port deviceActivate;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source rate_x {latency => 1ms..2ms;};
			fy: flow source rate_y {latency => 1ms..2ms;};
			fz: flow source rate_z {latency => 1ms..2ms;};
	end Gyroscope;
		
	device GPS
		features
			long: out data port position;
			lat: out data port position;
			el: out data port position;
			time: out data port gpsTimeStamp;
			gps_activate: in data port deviceActivate;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source long {latency => 1ms..2ms;};
			fy: flow source lat {latency => 1ms..2ms;};
			fz: flow source el {latency => 1ms..2ms;};
			fw: flow source time {latency => 1ms..2ms;};
	end GPS;
		
	device StarTracker
		features
			st_rot_x: out data port radians;
			st_rot_y: out data port radians;
			st_rot_z: out data port radians;
			st_activate: in data port deviceActivate;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source st_rot_x {latency => 1ms..2ms;};
			fy: flow source st_rot_y {latency => 1ms..2ms;};
			fz: flow source st_rot_z {latency => 1ms..2ms;};
	end StarTracker;
		
		
	-- --------------- DEVICES: ACTUATORS ------------------	
	device RxWheel
		features
			tor_x: in data port torque;
			tor_y: in data port torque;
			tor_z: in data port torque;
			
			comm: requires bus access AocsBus;

		flows
			fx: flow sink tor_x {latency => 1ms .. 2ms;};
			fy: flow sink tor_y {latency => 1ms .. 2ms;};
			fz: flow sink tor_z {latency => 1ms .. 2ms;};				
	end RxWheel;
	device Thruster
		features
			dV_x: in data port deltaV;
			dV_y: in data port deltaV;
			dV_z: in data port deltaV;
			
			comm: requires bus access AocsBus;

		flows
			fx: flow sink dV_x {latency => 1ms .. 2ms;};
			fy: flow sink dV_y {latency => 1ms .. 2ms;};
			fz: flow sink dV_z {latency => 1ms .. 2ms;};				
	end Thruster;
	
	
	
	-- ---------------- DEVICES: COMPUTERS AND TELEMETRY -------------- 
	
	-- the main AOCS computer .... probably this will have to be repeated for redundency
	device AocsCpu
		features
			-- inputs from devices to computer
			fss_rot_x_in: in data port radians;
			fss_rot_y_in: in data port radians;
			fss_rot_z_in: in data port radians;
			css_rot_x_in: in data port radians;
			css_rot_y_in: in data port radians;
			css_rot_z_in: in data port radians;
			sps_present_in: in data port sunExist;
			es_rot_x_in: in data port radians;
			es_rot_y_in: in data port radians;
			es_rot_z_in: in data port radians;
			mag_x_in: in data port magneto;
			mag_y_in: in data port magneto;
			mag_z_in: in data port magneto;
			rate_x_in: in data port angularRate;
			rate_y_in: in data port angularRate;
			rate_z_in: in data port angularRate;
			gps_long_in: in data port position;
			gps_lat_in: in data port position;
			gps_el_in: in data port position;
			gps_time_in: in data port gpsTimeStamp;
			st_rot_x_in: in data port radians;
			st_rot_y_in: in data port radians;
			st_rot_z_in: in data port radians;
			
			
			-- stuff received from/ sent to the main onboard computer
			telecommand_in: in data port telecommandString; -- this signal is received from the OBC (on board computer)
			telecommand_out: out data port telecommandString; -- will be sent to processes that need it
			telemetry_in: in data port telemetryString;
			telemetry_out: out data port telemetryString;
			activate_in: in data port aocsActivate;
			activate_out: out data port aocsActivate;
			
			-- stuff related to the watchdog
			to_watchdog: out data port watchdogString;
			
			-- activation values coming from the reconfiguration thread
			fss_activate_in: in data port deviceActivate;
			css_activate_in: in data port deviceActivate;
			sps_activate_in: in data port deviceActivate;
			es_activate_in: in data port deviceActivate;
			mag_activate_in: in data port deviceActivate;
			rate_activate_in: in data port deviceActivate;
			st_activate_in: in data port deviceActivate;
			gps_activate_in: in data port deviceActivate;
			
			
			-- activation values going to devices
			fss_activate_out: out data port deviceActivate;
			css_activate_out: out data port deviceActivate;
			sps_activate_out: out data port deviceActivate;
			es_activate_out: out data port deviceActivate;
			mag_activate_out: out data port deviceActivate;
			rate_activate_out: out data port deviceActivate;
			st_activate_out: out data port deviceActivate;
			gps_activate_out: out data port deviceActivate;
			
			-- actuation values received from actuation processes 
			tor_x_in: in data port torque;
			tor_y_in: in data port torque;
			tor_z_in: in data port torque;
			dV_x_in: in data port deltaV;
			dV_y_in: in data port deltaV;
			dV_z_in: in data port deltaV;
			
			-- sensor values sent from computer to processes
			fss_rot_x_out: out data port radians;
			fss_rot_y_out: out data port radians;
			fss_rot_z_out: out data port radians;
			css_rot_x_out: out data port radians;
			css_rot_y_out: out data port radians;
			css_rot_z_out: out data port radians;
			sps_present_out: out data port sunExist;
			es_rot_x_out: out data port radians;
			es_rot_y_out: out data port radians;
			es_rot_z_out: out data port radians;
			mag_x_out: out data port magneto;
			mag_y_out: out data port magneto;
			mag_z_out: out data port magneto;
			rate_x_out: out data port angularRate;
			rate_y_out: out data port angularRate;
			rate_z_out: out data port angularRate;
			gps_long_out: out data port position;
			gps_lat_out: out data port position;
			gps_el_out: out data port position;
			gps_time_out: out data port gpsTimeStamp;
			st_rot_x_out: out data port radians;
			st_rot_y_out: out data port radians;
			st_rot_z_out: out data port radians;
			
			-- activation output signals going to devices
			fss_activate_out: out data port deviceActivate;
			css_activate_out: out data port deviceActivate;
			sps_activate_out: out data port deviceActivate;
			es_activate_out: out data port deviceActivate;
			mag_activate_out: out data port deviceActivate;
			st_activate_out: out data port deviceActivate;
			gps_activate_out: out data port deviceActivate;
			
			
			-- actuator output values going to actuators 
			tor_x_out: out data port torque;
			tor_y_out: out data port torque;
			tor_z_out: out data port torque;
			dV_x_out: out data port deltaV;
			dV_y_out: out data port deltaV;
			dV_z_out: out data port deltaV;
			
			aocs: requires bus access AocsBus;
			tmtc: requires bus access TmTcBus;
	end AocsCpu;
	
	-- defining the main onboard and data handling computer of the satellite
	device ObdhCpu
		features
			telecommand: out data port telecommandString;
			telemetry: in data port telemetryString;
			activation: out data port aocsActivate;
			
			tmtc: requires bus access TmTcBus;
	end ObdhCpu;
	
	
	-- defining the watchdog that is responsible for monitoring the AOCS
	device watchdog
		features
			-- to be received from AOCS computers
			watchdog_acos_main_in: in data port watchdogString;
			watchdog_acos_red_in: in data port watchdogString;
			
			-- to be sent to a thread
			watchdog_acos_main_out: out data port watchdogString;
			watchdog_acos_red_out: out data port watchdogString;
			
			watchdog_response_main_in: in data port aocsActivate;
			watchdog_response_red_in: in data port aocsActivate;
			watchdog_response_main_out: out data port aocsActivate;
			watchdog_response_red_out: out data port aocsActivate;
			
	end watchdog;
	
	-- --------------------- PROCESSES AND THREADS ---------------------
	
	-- process and threads for controlling attitude (with implementations)
	process attitudeController -- remember: the connections of the ports of a process with sensors is done in the system implementation
		features
			fss_rot_x: in data port radians;
			fss_rot_y: in data port radians;
			fss_rot_z: in data port radians;
			css_rot_x: in data port radians;
			css_rot_y: in data port radians;
			css_rot_z: in data port radians;
			sps_present: in data port sunExist;
			es_rot_x: in data port radians;
			es_rot_y: in data port radians;
			es_rot_z: in data port radians;
			mag_x: in data port magneto;
			mag_y: in data port magneto;
			mag_z: in data port magneto;
			rate_x: in data port angularRate;
			rate_y: in data port angularRate;
			rate_z: in data port angularRate;
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			telecommand: in data port telecommandString;
			
			tor_x: out data port torque;
			tor_y: out data port torque;
			tor_z: out data port torque;
	end attitudeController;
	
	thread fuseOrientation
		features
			fss_rot_x: in data port radians;
			fss_rot_y: in data port radians;
			fss_rot_z: in data port radians;
			css_rot_x: in data port radians;
			css_rot_y: in data port radians;
			css_rot_z: in data port radians;
			sps_present: in data port sunExist;
			es_rot_x: in data port radians;
			es_rot_y: in data port radians;
			es_rot_z: in data port radians;
			mag_x: in data port magneto;
			mag_y: in data port magneto;
			mag_z: in data port magneto;
			rate_x: in data port angularRate;
			rate_y: in data port angularRate;
			rate_z: in data port angularRate;
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			telecommand: in data port telecommandString;
			
			des_orient_x: out data port radians;
			des_orient_y: out data port radians;
			des_orient_z: out data port radians;
	end fuseOrientation;
	
	thread implementation fuseOrientation.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 100ms;
	end fuseOrientation.impl;
	
	
	thread attitudeControlThread
		features
			des_orient_x: in data port radians;
			des_orient_y: in data port radians;
			des_orient_z: in data port radians;
			
			tor_x: out data port torque;
			tor_y: out data port torque;
			tor_z: out data port torque;
	end attitudeControlThread;
	
	thread implementation attitudeControlThread.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 100ms;
	end attitudeControlThread.impl;
	
	process implementation attitudeController.impl
		subcomponents
			fusion_worker: thread fuseOrientation;
			act_worker: thread attitudeControlThread;
		connections
			fss_x: port fss_rot_x -> fusion_worker.fss_rot_x;
			fss_y: port fss_rot_y -> fusion_worker.fss_rot_y;
			fss_z: port fss_rot_z -> fusion_worker.fss_rot_z;
			
			css_x: port css_rot_x -> fusion_worker.css_rot_x;
			css_y: port css_rot_y -> fusion_worker.css_rot_y;
			css_z: port css_rot_z -> fusion_worker.css_rot_z;
			
			sps: port sps_present -> fusion_worker.sps_present;
			
			es_x: port es_rot_x -> fusion_worker.es_rot_x;
			es_y: port es_rot_y -> fusion_worker.es_rot_y;
			es_z: port es_rot_z -> fusion_worker.es_rot_z;
			
			magx: port mag_x -> fusion_worker.mag_x;
			magy: port mag_y -> fusion_worker.mag_y;
			magz: port mag_z -> fusion_worker.mag_z;
			
			ratex: port rate_x -> fusion_worker.rate_x;
			ratey: port rate_y -> fusion_worker.rate_y;
			ratez: port rate_z -> fusion_worker.rate_z;
			
			st_x: port st_rot_x -> fusion_worker.st_rot_x;
			st_y: port st_rot_y -> fusion_worker.st_rot_y;
			st_z: port st_rot_z -> fusion_worker.st_rot_z;
			
			-- the attitude controller receives the telecommand string as well
			-- in case there are any specific orientation requirements
			telecommand_con: port telecommand -> fusion_worker.telecommand;
			
			
			des_x: port fusion_worker.des_orient_x -> act_worker.des_orient_x;
			des_y: port fusion_worker.des_orient_y -> act_worker.des_orient_y;
			des_z: port fusion_worker.des_orient_z -> act_worker.des_orient_z;
			
			tx: port act_worker.tor_x -> tor_x;
			ty: port act_worker.tor_y -> tor_y;
			tz: port act_worker.tor_z -> tor_z;
	end attitudeController.impl;
	
	
	-- process and thread for controlling the orbit (with implementations)
	process orbitController
		features
			gps_long: in data port position;
			gps_lat: in data port position;
			gps_el: in data port position;
			gps_time: in data port gpsTimeStamp;
			
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			telecommand: in data port telecommandString;
			
			dV_x: out data port deltaV;
			dV_y: out data port deltaV;
			dV_z: out data port deltaV;
	end orbitController;
	
	thread orbitControlThread
		features
			gps_long: in data port position;
			gps_lat: in data port position;
			gps_el: in data port position;
			gps_time: in data port gpsTimeStamp;
			
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			telecommand: in data port telecommandString;
			
			dV_x: out data port deltaV;
			dV_y: out data port deltaV;
			dV_z: out data port deltaV;
	end orbitControlThread;
	
	thread implementation orbitControlThread.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 10000ms;
	end orbitControlThread.impl;
	
	process implementation orbitController.impl
		subcomponents
			orbit_worker: thread orbitControlThread;
		connections
			gps_long_con: port gps_long -> orbit_worker.gps_long;
			gps_lat_con: port gps_lat -> orbit_worker.gps_lat;
			gps_el_con: port gps_el -> orbit_worker.gps_el;
			gps_time_con: port gps_time -> orbit_worker.gps_time;
			
			st_x: port st_rot_x -> orbit_worker.st_rot_x;
			st_y: port st_rot_y -> orbit_worker.st_rot_y;
			st_z: port st_rot_z -> orbit_worker.st_rot_z;
			
			mission_mode_in: port telecommand -> orbit_worker.telecommand;
			
			dv_x_in: port orbit_worker.dV_x -> dV_x;
			dv_y_in: port orbit_worker.dV_y -> dV_y;
			dv_z_in: port orbit_worker.dV_z -> dV_z;
	end orbitController.impl;
	
	
	
	-- process and threads for detecting anomalies and reconfiguring the system (with implementations)
	
	-- this process takes all sensor inputs, compares them and produces on/off signals to (de)activate devices
	process AocsReconfiguration
		features
			-- inputs of the process
			fss_rot_x: in data port radians;
			fss_rot_y: in data port radians;
			fss_rot_z: in data port radians;
			
			css_rot_x: in data port radians;
			css_rot_y: in data port radians;
			css_rot_z: in data port radians;
			
			sps_present: in data port sunExist;
			
			es_rot_x: in data port radians;
			es_rot_y: in data port radians;
			es_rot_z: in data port radians;
			
			mag_x: in data port magneto;
			mag_y: in data port magneto;
			mag_z: in data port magneto;
			
			rate_x: in data port angularRate;
			rate_y: in data port angularRate;
			rate_z: in data port angularRate;
			
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			gps_long: in data port position;
			gps_lat: in data port position;
			gps_el: in data port position;
			gps_time: in data port gpsTimeStamp;
			
			telecommand: in data port telecommandString;
			activate: in data port aocsActivate;
			
			-- outputs of the process
			fss_activate: out data port deviceActivate;
			css_activate: out data port deviceActivate;
			sps_activate: out data port deviceActivate;
			es_activate: out data port deviceActivate;
			mag_activate: out data port deviceActivate;
			rate_activate: out data port deviceActivate;
			st_activate: out data port deviceActivate;
			gps_activate: out data port deviceActivate;
			
	end AocsReconfiguration;
	
	-- this thread is responsible for comparing sensor readings, checking their ranges and issue (de)activation commands for different devices (sensors basically) 
	thread AocsReconfigurationThread
		features
		-- inputs of the thread
			fss_rot_x: in data port radians;
			fss_rot_y: in data port radians;
			fss_rot_z: in data port radians;
			
			css_rot_x: in data port radians;
			css_rot_y: in data port radians;
			css_rot_z: in data port radians;
			
			sps_present: in data port sunExist;
			
			es_rot_x: in data port radians;
			es_rot_y: in data port radians;
			es_rot_z: in data port radians;
			
			mag_x: in data port magneto;
			mag_y: in data port magneto;
			mag_z: in data port magneto;
			
			rate_x: in data port angularRate;
			rate_y: in data port angularRate;
			rate_z: in data port angularRate;
			
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			gps_long: in data port position;
			gps_lat: in data port position;
			gps_el: in data port position;
			gps_time: in data port gpsTimeStamp;
			
			telecommand: in data port telecommandString;
			activate: in data port aocsActivate;
			
			-- outputs of the thread
			fss_activate: out data port deviceActivate;
			css_activate: out data port deviceActivate;
			sps_activate: out data port deviceActivate;
			es_activate: out data port deviceActivate;
			mag_activate: out data port deviceActivate;
			rate_activate: out data port deviceActivate;
			st_activate: out data port deviceActivate;
			gps_activate: out data port deviceActivate;
	end AocsReconfigurationThread;
	
	thread implementation AocsReconfigurationThread.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 100ms;
	end AocsReconfigurationThread.impl;
	
	
	process implementation AocsReconfiguration.impl
		subcomponents
			worker: thread AocsReconfigurationThread;
		connections
			-- inputs connections
			fss_x: port fss_rot_x -> worker.fss_rot_x;
			fss_y: port fss_rot_y -> worker.fss_rot_y;
			fss_z: port fss_rot_z -> worker.fss_rot_z;
			
			css_x: port css_rot_x -> worker.css_rot_x;
			css_y: port css_rot_y -> worker.css_rot_y;
			css_z: port css_rot_z -> worker.css_rot_z;
			
			sps: port sps_present -> worker.sps_present;
			
			es_x: port es_rot_x -> worker.es_rot_x;
			es_y: port es_rot_y -> worker.es_rot_y;
			es_z: port es_rot_z -> worker.es_rot_z;
			
			magx: port mag_x -> worker.mag_x;
			magy: port mag_y -> worker.mag_y;
			magz: port mag_z -> worker.mag_z;
			
			ratex: port rate_x -> worker.rate_x;
			ratey: port rate_y -> worker.rate_y;
			ratez: port rate_z -> worker.rate_z;
			
			st_x: port st_rot_x -> worker.st_rot_x;
			st_y: port st_rot_y -> worker.st_rot_y;
			st_z: port st_rot_z -> worker.st_rot_z;
			
			gps_long_con: port gps_long -> worker.gps_long;
			gps_lat_con: port gps_lat -> worker.gps_lat;
			gps_el_con: port gps_el -> worker.gps_el;
			gps_time_con: port gps_time -> worker.gps_time;
	
			telecommand_con: port telecommand -> worker.telecommand;
			activate_cond: port activate -> worker.activate;
			
			-- outputs connections
			fss_act: port worker.fss_activate -> fss_activate;
			css_act: port worker.css_activate -> css_activate;
			sps_act: port worker.sps_activate -> sps_activate;
			es_act: port worker.es_activate -> es_activate;
			mag_act: port worker.mag_activate -> mag_activate;
			rate_act: port worker.rate_activate -> rate_activate;
			st_act: port worker.st_activate -> st_activate;
			gps_act: port worker.gps_activate -> gps_activate;
							
	end AocsReconfiguration.impl;
	
	
	
	-- telemeetry related processes and threads
	process sendTelemetry
		features
			-- inputs of the process
			fss_rot_x: in data port radians;
			fss_rot_y: in data port radians;
			fss_rot_z: in data port radians;
			
			css_rot_x: in data port radians;
			css_rot_y: in data port radians;
			css_rot_z: in data port radians;
			
			sps_present: in data port sunExist;
			
			es_rot_x: in data port radians;
			es_rot_y: in data port radians;
			es_rot_z: in data port radians;
			
			mag_x: in data port magneto;
			mag_y: in data port magneto;
			mag_z: in data port magneto;
			
			rate_x: in data port angularRate;
			rate_y: in data port angularRate;
			rate_z: in data port angularRate;
			
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			gps_long: in data port position;
			gps_lat: in data port position;
			gps_el: in data port position;
			gps_time: in data port gpsTimeStamp;
			
			telemtryMessage: out data port telemetryString;
	end sendTelemetry;
	
	
	thread sendTelemetryThread
		features
			-- inputs of the process
			fss_rot_x: in data port radians;
			fss_rot_y: in data port radians;
			fss_rot_z: in data port radians;
			
			css_rot_x: in data port radians;
			css_rot_y: in data port radians;
			css_rot_z: in data port radians;
			
			sps_present: in data port sunExist;
			
			es_rot_x: in data port radians;
			es_rot_y: in data port radians;
			es_rot_z: in data port radians;
			
			mag_x: in data port magneto;
			mag_y: in data port magneto;
			mag_z: in data port magneto;
			
			rate_x: in data port angularRate;
			rate_y: in data port angularRate;
			rate_z: in data port angularRate;
			
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			gps_long: in data port position;
			gps_lat: in data port position;
			gps_el: in data port position;
			gps_time: in data port gpsTimeStamp;
			
			telemtryMessage: out data port telemetryString;
	end sendTelemetryThread;
	
	thread implementation sendTelemetryThread.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
	end sendTelemetryThread.impl;
	
	
	process implementation sendTelemetry.impl
		subcomponents
			worker: thread sendTelemetryThread;
		connections
			fss_x: port fss_rot_x -> worker.fss_rot_x;
			fss_y: port fss_rot_y -> worker.fss_rot_y;
			fss_z: port fss_rot_z -> worker.fss_rot_z;
			
			css_x: port css_rot_x -> worker.css_rot_x;
			css_y: port css_rot_y -> worker.css_rot_y;
			css_z: port css_rot_z -> worker.css_rot_z;
			
			sps: port sps_present -> worker.sps_present;
			
			es_x: port es_rot_x -> worker.es_rot_x;
			es_y: port es_rot_y -> worker.es_rot_y;
			es_z: port es_rot_z -> worker.es_rot_z;
			
			magx: port mag_x -> worker.mag_x;
			magy: port mag_y -> worker.mag_y;
			magz: port mag_z -> worker.mag_z;
			
			ratex: port rate_x -> worker.rate_x;
			ratey: port rate_y -> worker.rate_y;
			ratez: port rate_z -> worker.rate_z;
			
			st_x: port st_rot_x -> worker.st_rot_x;
			st_y: port st_rot_y -> worker.st_rot_y;
			st_z: port st_rot_z -> worker.st_rot_z;
			
			gps_long_con: port gps_long -> worker.gps_long;
			gps_lat_con: port gps_lat -> worker.gps_lat;
			gps_el_con: port gps_el -> worker.gps_el;
			gps_time_con: port gps_time -> worker.gps_time;
			
			telemetry_con: port worker.telemtryMessage -> telemtryMessage;
			 
	end sendTelemetry.impl;
	
	
	-- watchdog related processes and threads
	process watchdogEvent
		features
			to_watchdog: out data port watchdogString;
	end watchdogEvent;
	
	thread watchdogEventThread
		features
			to_watchdog: out data port watchdogString;
	end watchdogEventThread;
	
	thread implementation watchdogEventThread.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
	end watchdogEventThread.impl;
	
	process implementation watchdogEvent.impl --very simple thread that contains a function that generates a periodic event to be sent to watchdog
		subcomponents 
			worker: thread watchdogEventThread;
		connections
			to_watchdog_con: port worker.to_watchdog -> to_watchdog;
	end watchdogEvent.impl;
	
	
	
	-- ----------------------SYSTEM IMPLEMENTAITON (CONNECTIONS BETWEEN DEVICES)--------------
	system implementation Satellite.impl
		subcomponents
			-- including the sensors in the satellite
			fss_sens: device FineSunSensor;
			css_sens: device CoarseSunSensor;
			sps_sens: device SunPresenceSensor;
			es_sens: device EarthSensor;
			mag_sens: device Magnetometer;
			gyro_sens: device Gyroscope;
			gps_sens: device GPS;
			st_sens: device StarTracker;
			
			-- including the actuators in the satellite
			inertia_wheel: device RxWheel;
			thruster: device Thruster;
			
			-- including the CPUs in the system
			aocs_cpu: device AocsCpu;
			obdh_cpu: device ObdhCpu;
			watchdog_module: device watchdog;
			
			-- including the processes in the system
			 attitude_cont: process attitudeController;
			 orbit_cont: process orbitController;
			 aocs_reconfig: process AocsReconfiguration;
			 send_telem: process sendTelemetry;
			 watchdog_event: process watchdogEvent;
			 
			 -- including the busses needed 
			 aocs_bus: bus AocsBus;
			 tmtc_bus: bus TmTcBus;
			 
			 
		connections
			
			-- buses connections
			comm_fss: bus access aocs_bus <-> fss_sens.comm;
			comm_css: bus access aocs_bus <-> css_sens.comm;
			comm_sps: bus access aocs_bus <-> sps_sens.comm;
			comm_es: bus access aocs_bus <-> es_sens.comm;
			comm_mag: bus access aocs_bus <-> mag_sens.comm;
			comm_gyro: bus access aocs_bus <-> gyro_sens.comm;
			comm_gps: bus access aocs_bus <-> gps_sens.comm;
			comm_st: bus access aocs_bus <-> st_sens.comm;
			
			comm_aocs_cpu: bus access aocs_bus <-> aocs_cpu.aocs;
			comm_aocs_to_obdh: bus access tmtc_bus <-> aocs_cpu.tmtc;
			
			
			
			-- sensor connections to cpu (sens data + activation signal)
			fss_x: port fss_sens.fss_rot_x -> aocs_cpu.fss_rot_x_in;
			fss_y: port fss_sens.fss_rot_y -> aocs_cpu.fss_rot_y_in;
			fss_z: port fss_sens.fss_rot_z -> aocs_cpu.fss_rot_z_in;
			fss_active: port aocs_cpu.fss_activate_out -> fss_sens.fss_activate;
			
			css_x: port css_sens.css_rot_x -> aocs_cpu.css_rot_x_in;
			css_y: port css_sens.css_rot_y -> aocs_cpu.css_rot_y_in;
			css_z: port css_sens.css_rot_z -> aocs_cpu.css_rot_z_in;
			css_active: port aocs_cpu.css_activate_out -> css_sens.css_activate;
			
			sps: port sps_sens.sps_present -> aocs_cpu.sps_present_in;
			sps_active: port aocs_cpu.sps_activate_out -> sps_sens.sps_activate;
			
			es_x: port es_sens.es_rot_x -> aocs_cpu.es_rot_x_in;
			es_y: port es_sens.es_rot_y -> aocs_cpu.es_rot_y_in;
			es_z: port es_sens.es_rot_z -> aocs_cpu.es_rot_z_in;
			es_active: port aocs_cpu.es_activate_out -> es_sens.es_activate;
			
			magx: port mag_sens.mag_x -> aocs_cpu.mag_x_in;
			magy: port mag_sens.mag_y -> aocs_cpu.mag_y_in;
			magz: port mag_sens.mag_z -> aocs_cpu.mag_z_in;
			mag_active: port aocs_cpu.mag_activate_out -> mag_sens.mag_activate;
			
			ratex: port gyro_sens.rate_x -> aocs_cpu.rate_x_in;
			ratey: port gyro_sens.rate_y -> aocs_cpu.rate_y_in;
			ratez: port gyro_sens.rate_z -> aocs_cpu.rate_z_in;
			gyro_active: port aocs_cpu.rate_activate_out -> gps_sens.rate_activate;
			
			st_x: port st_sens.st_rot_x -> aocs_cpu.st_rot_x_in;
			st_y: port st_sens.st_rot_y -> aocs_cpu.st_rot_y_in;
			st_z: port st_sens.st_rot_z -> aocs_cpu.st_rot_z_in;
			st_active: port aocs_cpu.st_activate_out -> st_sens.st_activate;
			
			gps_long_con: port gps_sens.gps_long -> aocs_cpu.gps_long_in;
			gps_lat_con: port gps_sens.gps_lat -> aocs_cpu.gps_lat_in;
			gps_el_con: port gps_sens.gps_el -> aocs_cpu.gps_el_in;
			gps_time_con: port gps_sens.gps_time -> aocs_cpu.gps_time_in;
			gps_active: port aocs_cpu.gps_activate_out -> gps_sens.gps_activate;
	
			telecommand_con: port telecommand -> worker.telecommand;
			activate_cond: port activate -> worker.activate;
			
			
	end Satellite.impl;
	
	
	--------- DEVICE IMPLEMENTATIONS: SENSOR IMPLEMENTATION ---------------------

	device implementation FineSunSensor.impl
		properties
			Period => 100ms;
	end FineSunSensor.impl;
	device implementation CoarseSunSensor.impl
		properties
			Period => 100ms;
	end CoarseSunSensor.impl;
	device implementation SunPresenceSensor.impl
		properties
			Period => 1000ms;
	end SunPresenceSensor.impl;
	device implementation EarthSensor.impl
		properties
			Period => 1000ms;
	end EarthSensor.impl;
	device implementation Magnetometer.impl
		properties
			Period => 10ms;
	end Magnetometer.impl;
	device implementation Gyroscope.impl
		properties
			Period => 1ms;
	end Gyroscope.impl;
	device implementation GPS.impl
		properties
			Period => 1000ms;
	end GPS.impl;
	device implementation StarTracker.impl
		properties
			Period => 1000ms;
	end StarTracker.impl;
end lab3;