package lab3
public
	with Data_Model;
	
	bus AocsBus
	end AocsBus;
	
	bus TmTcBus
	end TmTcBus;
	
	-- data types needed
	
	data radians
		properties
			Data_Model::Data_Representation => float;
	end radians;
	
	data torque
		properties
			Data_Model::Data_Representation => float;
	end torque;
	
	data deltaV
		properties
			Data_Model::Data_Representation => float;
	end deltaV;
	
	data magneto
		properties
			Data_Model::Data_Representation => float;
	end magneto;
	
	data angularRate
		properties
			Data_Model::Data_Representation => float;
	end angularRate;
	
	data sunExist
		properties
			Data_Model::Data_Representation => boolean;
	end sunExist;
	
	-- position: for representing longitude, latitude and altitude data from GPS
	data position 
		properties
			Data_Model::Data_Representation => float;
	end position;
	data gpsTimeStamp
		properties
			Data_Model::Data_Representation => string;
	end gpsTimeStamp;
	
	-- data types for activation of devices
	data deviceActivate
		properties
			Data_Model::Data_Representation => boolean;
	end deviceActivate;
	
	
	-- -------------------------- DEVICES --------------------------------------
	
	-- -----------------DEVICES: SENSORS ----------------------
	device FineSunSensor
		features
			fss_rot_x: out data port radians;
			fss_rot_y: out data port radians;
			fss_rot_z: out data port radians;
			fss_activte: in data port deviceActivation;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source fss_rot_x {latency => 1ms..2ms;};
			fy: flow source fss_rot_y {latency => 1ms..2ms;};
			fz: flow source fss_rot_z {latency => 1ms..2ms;};
	end FineSunSensor;
		
	device CoarseSunSensor
		features
			css_rot_x: out data port radians;
			css_rot_y: out data port radians;
			css_rot_z: out data port radians;
			css_activte: in data port deviceActivation;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source css_rot_x {latency => 1ms..2ms;};
			fy: flow source css_rot_y {latency => 1ms..2ms;};
			fz: flow source css_rot_z {latency => 1ms..2ms;};
	end CoarseSunSensor;
	
	device SunPresenceSensor
		features
			is_present: out data port;
			sps_activte: in data port deviceActivation;
			
			
			comm: requires bus access AocsBus;
			
		flows
			fi: flow source is_present {latency => 1ms..2ms;};
	end SunPresenceSensor;
		
	device EarthSensor
		features
			es_rot_x: out data port radians;
			es_rot_y: out data port radians;
			es_rot_z: out data port radians;
			es_activte: in data port deviceActivation;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source es_rot_x {latency => 1ms..2ms;};
			fy: flow source es_rot_y {latency => 1ms..2ms;};
			fz: flow source es_rot_z {latency => 1ms..2ms;};
	end EarthSensor;
	
	device Magnetometer
		features
			mag_x: out data port magneto;
			mag_y: out data port magneto;
			mag_z: out data port magneto;
			mag_activte: in data port deviceActivation;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source mag_x {latency => 1ms..2ms;};
			fy: flow source mag_y {latency => 1ms..2ms;};
			fz: flow source mag_z {latency => 1ms..2ms;};
	end Magnetometer;
		
	device Gyroscope
		features
			rate_x: out data port angularRate;
			rate_y: out data port angularRate;
			rate_z: out data port angularRate;
			rate_activte: in data port deviceActivation;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source rate_x {latency => 1ms..2ms;};
			fy: flow source rate_y {latency => 1ms..2ms;};
			fz: flow source rate_z {latency => 1ms..2ms;};
	end Gyroscope;
		
	device GPS
		features
			long: out data port position;
			lat: out data port position;
			el: out data port position;
			time: out data port gpsTimeStamp;
			gps_activte: in data port deviceActivation;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source long {latency => 1ms..2ms;};
			fy: flow source lat {latency => 1ms..2ms;};
			fz: flow source el {latency => 1ms..2ms;};
			fw: flow source time {latency => 1ms..2ms;};
	end GPS;
		
	device StarTracker
		features
			st_rot_x: out data port radians;
			st_rot_y: out data port radians;
			st_rot_z: out data port radians;
			st_activte: in data port deviceActivation;
			
			comm: requires bus access AocsBus;
			
		flows
			fx: flow source st_rot_x {latency => 1ms..2ms;};
			fy: flow source st_rot_y {latency => 1ms..2ms;};
			fz: flow source st_rot_z {latency => 1ms..2ms;};
	end StarTracker;
		
		
	-- --------------- DEVICES: ACTUATORS ------------------	
	device RxWheel
		features
			tor_x: in data port torque;
			tor_y: in data port torque;
			tor_z: in data port torque;
			
			comm: requires bus access AocsBus;

		flows
			fx: flow sink tor_x {latency => 1ms .. 2ms;};
			fy: flow sink tor_y {latency => 1ms .. 2ms;};
			fz: flow sink tor_z {latency => 1ms .. 2ms;};				
	end RxWheel;
	device Thruster
		features
			dV_x: in data port deltaV;
			dV_y: in data port deltaV;
			dV_z: in data port deltaV;
			
			comm: requires bus access AocsBus;

		flows
			fx: flow sink dV_x {latency => 1ms .. 2ms;};
			fy: flow sink dV_y {latency => 1ms .. 2ms;};
			fz: flow sink dV_z {latency => 1ms .. 2ms;};				
	end Thruster;
	
	
	
	-- ---------------- DEVICES: COMPUTERS AND TELEMETRY --------------
	device TeleMetry
		features
			rot_x: in data port radians;
			rot_y: in data port radians;
			rot_z: in data port radians;
			long: in data port position;
			lat: in data port position;
			el: in data port position;
			time: in data port gpsTimeStamp;
			
		flows
			fx: flow sink rot_x {latency => 1ms .. 2ms;};
			fy: flow sink rot_y {latency => 1ms .. 2ms;};
			fz: flow sink rot_z {latency => 1ms .. 2ms;};
			flo: flow sink long {latency => 1ms..2ms;};
			fla: flow sink lat {latency => 1ms..2ms;};
			fel: flow sink el {latency => 1ms..2ms;};
			ft: flow sink time {latency => 1ms..2ms;};
	end TeleMetry;
	
	device TeleCommand
		features
			deltaV_x: out data port;
			deltaV_y: out data port;
			deltaV_z: out data port;
			
		flows
			fx: flow source deltaV_x {latency => 1ms .. 2ms;};
			fy: flow source deltaV_y {latency => 1ms .. 2ms;};
			fz: flow source deltaV_z {latency => 1ms .. 2ms;};	
	end TeleCommand;
	
	device AocsCpu
		features
			fss_rot_x_in: in data port radians;
			fss_rot_y_in: in data port radians;
			fss_rot_z_in: in data port radians;
			css_rot_x_in: in data port radians;
			css_rot_y_in: in data port radians;
			css_rot_z_in: in data port radians;
			sps_present_in: in data port sunExist;
			es_rot_x_in: in data port radians;
			es_rot_y_in: in data port radians;
			es_rot_z_in: in data port radians;
			mag_x_in: in data port magneto;
			mag_y_in: in data port magneto;
			mag_z_in: in data port magneto;
			rate_x_in: in data port angularRate;
			rate_y_in: in data port angularRate;
			rate_z_in: in data port angularRate;
			gps_long_in: in data port position;
			gps_lat_in: in data port position;
			gps_el_in: in data port position;
			gps_time_in: in data port gpsTimeStamp;
			st_rot_x_in: in data port radians;
			st_rot_y_in: in data port radians;
			st_rot_z_in: in data port radians;
			
			tor_x_out: out data port torque;
			tor_y_out: out data port torque;
			tor_z_out: out data port torque;
			dV_x_out: out data port deltaV;
			dV_y_out: out data port deltaV;
			dV_z_out: out data port deltaV;
			
			aocs: requires bus access AocsBus;
			tmtc: requires bus access TmTcBus;
	end AocsCpu;
	
	device TmTcCpu
		features
			deltaV_x: in data port;
			deltaV_y: in data port;
			deltaV_z: in data port;

			rot_x: out data port radians;
			rot_y: out data port radians;
			rot_z: out data port radians;
			long: out data port position;
			lat: out data port position;
			el: out data port position;
			time: out data port gpsTimeStamp;
			new_command: out event port;
			new_meter: out event port;
			
			tmtc: requires bus access TmTcBus;
	end TmTcCpu;
	
	
	-- --------------------- PROCESSES AND THREADS ---------------------
	
	-- process and threads for controlling attitude (with implementations)
	process attitudeController -- remember: the connections of the ports of a process with sensors is done in the system implementation
		features
			fss_rot_x: in data port radians;
			fss_rot_y: in data port radians;
			fss_rot_z: in data port radians;
			css_rot_x: in data port radians;
			css_rot_y: in data port radians;
			css_rot_z: in data port radians;
			sps_present: in data port sunExist;
			es_rot_x: in data port radians;
			es_rot_y: in data port radians;
			es_rot_z: in data port radians;
			mag_x: in data port magneto;
			mag_y: in data port magneto;
			mag_z: in data port magneto;
			rate_x: in data port angularRate;
			rate_y: in data port angularRate;
			rate_z: in data port angularRate;
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			tor_x: out data port torque;
			tor_y: out data port torque;
			tor_z: out data port torque;
	end attitudeController;
	
	thread fuseOrientation
		features
			fss_rot_x: in data port radians;
			fss_rot_y: in data port radians;
			fss_rot_z: in data port radians;
			css_rot_x: in data port radians;
			css_rot_y: in data port radians;
			css_rot_z: in data port radians;
			sps_present: in data port sunExist;
			es_rot_x: in data port radians;
			es_rot_y: in data port radians;
			es_rot_z: in data port radians;
			mag_x: in data port magneto;
			mag_y: in data port magneto;
			mag_z: in data port magneto;
			rate_x: in data port angularRate;
			rate_y: in data port angularRate;
			rate_z: in data port angularRate;
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			des_orient_x: out data port radians;
			des_orient_y: out data port radians;
			des_orient_z: out data port radians;
	end fuseOrientation;
	
	thread implementation fuseOrientation.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 100ms;
	end fuseOrientation.impl;
	
	
	thread attitudeControlThread
		features
			des_orient_x: in data port radians;
			des_orient_y: in data port radians;
			des_orient_z: in data port radians;
			
			tor_x: out data port torque;
			tor_y: out data port torque;
			tor_z: out data port torque;
	end attitudeControlThread;
	
	thread implementation attitudeControlThread.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 100ms;
	end attitudeControlThread.impl;
	
	process implementation attitudeController.impl
		subcomponents
			fusion_worker: thread fuseOrientation;
			act_worker: thread attitudeControlThread;
		connections
			fss_x: port fss_rot_x -> fusion_worker.fss_rot_x;
			fss_y: port fss_rot_y -> fusion_worker.fss_rot_y;
			fss_z: port fss_rot_z -> fusion_worker.fss_rot_z;
			
			css_x: port css_rot_x -> fusion_worker.css_rot_x;
			css_y: port css_rot_y -> fusion_worker.css_rot_y;
			css_z: port css_rot_z -> fusion_worker.css_rot_z;
			
			sps: port sps_present -> fusion_worker.sps_present;
			
			es_x: port es_rot_x -> fusion_worker.es_rot_x;
			es_y: port es_rot_y -> fusion_worker.es_rot_y;
			es_z: port es_rot_z -> fusion_worker.es_rot_z;
			
			magx: port mag_x -> fusion_worker.mag_x;
			magy: port mag_y -> fusion_worker.mag_y;
			magz: port mag_z -> fusion_worker.mag_z;
			
			ratex: port rate_x -> fusion_worker.rate_x;
			ratey: port rate_y -> fusion_worker.rate_y;
			ratez: port rate_z -> fusion_worker.rate_z;
			
			st_x: port st_rot_x -> fusion_worker.st_rot_x;
			st_y: port st_rot_y -> fusion_worker.st_rot_y;
			st_z: port st_rot_z -> fusion_worker.st_rot_z;
			
			
			des_x: port fusion_worker.des_orient_x -> act_worker.des_orient_x;
			des_y: port fusion_worker.des_orient_y -> act_worker.des_orient_y;
			des_z: port fusion_worker.des_orient_z -> act_worker.des_orient_z;
			
			tx: port act_worker.tor_x -> tor_x;
			ty: port act_worker.tor_y -> tor_y;
			tz: port act_worker.tor_z -> tor_z;
	end attitudeController.impl;
	
	
	-- process and thread for controlling the orbit (with implementations)
	process orbitController
		features
			gps_long: in data port position;
			gps_lat: in data port position;
			gps_el: in data port position;
			gps_time: in data port gpsTimeStamp;
			
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			dV_x: out data port deltaV;
			dV_y: out data port deltaV;
			dV_z: out data port deltaV;
	end orbitController;
	
	thread orbitControlThread
		features
			gps_long: in data port position;
			gps_lat: in data port position;
			gps_el: in data port position;
			gps_time: in data port gpsTimeStamp;
			
			st_rot_x: in data port radians;
			st_rot_y: in data port radians;
			st_rot_z: in data port radians;
			
			dV_x: out data port deltaV;
			dV_y: out data port deltaV;
			dV_z: out data port deltaV;
	end orbitControlThread;
	
	thread implementation orbitControlThread.impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 10000ms;
	end orbitControlThread.impl;
	
	process implementation orbitController.impl
		subcomponents
			orbit_worker: thread orbitControlThread;
		connections
			gps_long_: port gps_long -> orbit_worker.gps_long;
			gps_lat_: port gps_lat -> orbit_worker.gps_lat;
			gps_el_: port gps_el -> orbit_worker.gps_el;
			gps_time_: port gps_time -> orbit_worker.gps_time;
			
			st_x: port st_rot_x -> orbit_worker.st_rot_x;
			st_y: port st_rot_y -> orbit_worker.st_rot_y;
			st_z: port st_rot_z -> orbit_worker.st_rot_z;
			
			dv_x: port orbit_worker.dV_x -> dV_x;
			dv_y: port orbit_worker.dV_y -> dV_y;
			dv_z: port orbit_worker.dV_z -> dV_z;
			
	end orbitController.impl;
	-- process and threads for detecting anomalies and reconfiguring the system (with implementations)
	process AocsReconfiguration
		features
			
	end AocsReconfiguration;
	
	
	
	
	
	
	--------- DEVICE IMPLEMENTATIONS: SENSOR IMPLEMENTATION ---------------------

	device implementation FineSunSensor.impl
		properties
			Period => 100ms;
	end FineSunSensor.impl;
	device implementation CoarseSunSensor.impl
		properties
			Period => 100ms;
	end CoarseSunSensor.impl;
	device implementation SunPresenceSensor.impl
		properties
			Period => 1000ms;
	end SunPresenceSensor.impl;
	device implementation EarthSensor.impl
		properties
			Period => 1000ms;
	end EarthSensor.impl;
	device implementation Magnetometer.impl
		properties
			Period => 10ms;
	end Magnetometer.impl;
	device implementation Gyroscope.impl
		properties
			Period => 1ms;
	end Gyroscope.impl;
	device implementation GPS.impl
		properties
			Period => 1000ms;
	end GPS.impl;
	device implementation StarTracker.impl
		properties
			Period => 1000ms;
	end StarTracker.impl;
end lab3;